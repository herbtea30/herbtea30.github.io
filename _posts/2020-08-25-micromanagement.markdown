---
layout: post
title: 'micormanagement ?'
description: programming management 스케줄 사기저하
date: 2020-08-25 15:22:00 00000
categories: micromanagement leader managing
---

![mm]](https://t4.ftcdn.net/jpg/00/16/13/89/240_F_16138996_wUKVkp5FvGhI16j4TKNBVB627toHoDpb.jpg)
마이크로 매니징<br/>
이게 무슨 말인가 처음에는 몰랐고, 관심도 없었다. 그냥 내 업무 잘하고, 협업 잘하면 <b>다.일.거.라.고</b> 생각했다.<br/><br/>
얼마 전 새로 온 인간이 있다.<br/>
그 인간의 추진으로 큰 프로젝트를 진행 중이다. 
20년동안 아무도 할 생각 안했던 아주 큰 프로젝트.<br/>
일단, 입만 턴다.<br/> 그 지식의 대부분은 비즈니스 복잡도가 심플한 다른회사의 케이스를 말한다.<br/>
요구사항을 듣고, 바로 그자리에서 
일정을 요구한다.<br/>
그리고 러프한 일정따위는 바로 컷! 답을 정해두고 물어보는 것이다.<br/><br/>
그 일정을 다음 미팅때 한 달을 땡겨서 말하면서 왜 못했냐고 한다.<br/>??<br/> 못한거 일일보고 항목별로 하나하나 일일보고까지 하란다.<br/>
<br/>
절대시간은 부족한데, 관리를 위한 일이 또 추가 되었다. 도대체 무엇이 문제인건가. 
<br/>
<br/>
결국 직원들의 퇴사로 마무리가 되어지겠지
<br/>


#

- ## 시간 ?

  매니저가 자기 마음대로 타임스케줄을 변경하여 내 일정을 망가뜨릴경우. 정말 뭐하나 싶다.

- ## 일 간섭 ?

  마찬가지로, 지나친 업무에 간섭으로 통해 자율적인 업무가 아닌 강압적인 일을 하게 되는데 그냥 생각이 없는 기계같다.



## 그러면서 책임은?
본인이 시키는대로 하라고 해놓고, 제대로 안되면 본인이 절대 책임은 지지 않는다. 그냥 실무의 책임이고, 왜 확인 안했냐, 생각이 있는거냐 하면서 화를 낸다. 문제가 뻔히 보이는데 말할 때는 안듣고, 일 터지면 니탓이오. 생각만 해도 최악이다.


---

- ## 

      회사에서 서비스를 진행하는데 보통 여러 개발자들이 같이 개발하는 환경이다.
      그리고 보통 git을 사용해서, 소스코드를 관리하고, 각 회사들은 브랜치 전략에 맞춰
      브랜치를 생성하여 개발을 진행한다.
      개발자들은 개별로 담당하는 프로그램의 테스트를 한 후 커밋을 하고,
      중앙저장소에 PR을 날리고, 중앙저장소에서 PR을 코드리뷰를 거쳐 반영한다.
      중앙저장소에 저장된 소스를 내려받아 동기화를 하고, 빌드테스트 한후 빌드 한다.
      테스트 서버에서 테스트를 마치고, 릴리즈하여, 운영서버에 반영 후 운영한다.
      이 모든 절차가 수동으로 이루어거나, 스크립트 형태로 하기도 한다.

  <br/>

* ## 더 먼 옛날..

      좀 더 Old한 구성을 하는 곳에서는 cvs/svn/git과 같은 VCS도 사용하지 않고,
      수동으로 개인들이 소스관리하고, 테스트코드/코드리뷰는 없고, 바로 운영서버에 수동으로
      Copy & paste를 하고 반영전에 서버를 중단하고 반영하기에 다운타임도 발생할 것이다.
      그리고 배포본이 최종본이 아니라면??
      .....? 꿈이길

  ![어?](https://image.fmkorea.com/files/attach/new/20200218/486616/2280159646/2723483754/96f4a730754ae62e81d65df450dc5d1d.jpg)

  <br/>

---

- ## 왜해야하는가?

  <b>어느정도 답이 되었는지..<br/>

  위 개발 프로세스를 자동화 할 수 있다면 어떻게 하겠는가?<br/>
  <br/>
  수동으로 적용함에 있어서 발생하는 오류의 발생을 없애고<br/>
  그것도 서비스를 무중단으로 변경된 빌드의 적용가능하다면??<br/>
  개발자는 좀 더 개발에 집중할 수 있어서 코드의 품질이 올라 갈 것이고,<br/>
  훨씬 빠른 속도로, 개발 전체 프로세스가 진행될 것이다.<br/>
  <br/>
  결국 프로젝트가 커지고, 조직이 커지면 수동의 한계는 명확하다.<br/>
  <br/>
  이러한 부분을 해결하기 위해 나온 개념이 CI/CD이다<br/><br/>
  <br/>

- ## 어떻게 해야하는 것일까?

  좋은건 알겠는데 어떻게 적용해야하는지<br/>
  가장 많이 사용하는 툴은 뭐가 있을까<br/>
  어떻게 구성해야 사용하는 것일까? <br/>
  <br/>
  차차 알아보도록 해봐야겠다.<br/>

---

- ## 기본지식

  앞으로 작성될 내용에는 기본적으로 알고 있어야 할 것들

  - git에 대한 기본지식
  - docker에 대한 기본지식(물론 없어도 가능, 알면 편하게 가능)
  - 무엇보다도 인프라 구성에 대한 관심
  - 개선하고자 하는 의지!

  일단 정도면 되지 않을까?

## <br/>
